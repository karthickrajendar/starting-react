# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

function findDivisors(number) {
  let divisors = [];

  // Loop from 1 to half of the number
  for (let i = 1; i <= number / 2; i++) {
    // Check if 'number' is divisible by 'i' without a remainder
    if (number % i === 0) {
      divisors.push(i);
    }
  }

  // Add the number itself as a divisor
  divisors.push(number);

  return divisors;
}

const inputNumber = 12; // Change this to the number you want to find divisors for
const divisors = findDivisors(inputNumber);

console.log(`Divisors of ${inputNumber}: ${divisors.join(', ')}`);

// Sample employee data in JSON format
const employees = [
  { name: "Employee 1", location: "Location A", gender: "Male", role: "Developer" },
  { name: "Employee 2", location: "Location B", gender: "Female", role: "Designer" },
  // Add more employee data here
];

// Define team criteria (locations, genders, and roles should be arrays)
const teamCriteria = {
  location: ["Location A", "Location B"], // All locations
  gender: ["Male", "Female"], // All genders
  role: ["Developer", "Designer"], // All roles
};

// Shuffle function (Fisher-Yates shuffle)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// Function to generate teams
function generateTeams(employees, teamCriteria, teamSize) {
  // Shuffle the employees
  shuffleArray(employees);

  // Calculate the number of teams needed
  const numTeams = Math.ceil(employees.length / teamSize);

  // Initialize teams
  const teams = [];
  for (let i = 0; i < numTeams; i++) {
    teams.push([]);
  }

  // Distribute employees into teams while ensuring criteria match
  for (const employee of employees) {
    for (let i = 0; i < teams.length; i++) {
      // Check if the team meets the criteria for this employee
      const teamMeetsCriteria =
        teamCriteria.location.includes(employee.location) &&
        teamCriteria.gender.includes(employee.gender) &&
        teamCriteria.role.includes(employee.role);

      // If the team meets the criteria and has space, add the employee to it
      if (teamMeetsCriteria && teams[i].length < teamSize) {
        teams[i].push(employee);
        break; // Move to the next employee
      }
    }
  }

  // Distribute members from the last team to other teams if needed
  const lastTeam = teams[teams.length - 1];
  for (let i = 0; i < teams.length - 1; i++) {
    while (lastTeam.length < teamSize && teams[i].length > teamSize) {
      lastTeam.push(teams[i].pop());
    }
  }

  return teams;
}

// Define team size
const teamSize = 4;

// Generate teams
const teams = generateTeams(employees, teamCriteria, teamSize);

// Output the teams
console.log(teams);

// Sample employee data in JSON format
const employees = [
  { name: "Employee 1", location: "Location A", gender: "Male", role: "Developer" },
  { name: "Employee 2", location: "Location B", gender: "Female", role: "Designer" },
  // Add more employee data here
];

// Define team criteria (locations, genders, and roles should be arrays)
const teamCriteria = {
  location: ["Location A", "Location B"], // All locations
  gender: ["Male", "Female"], // All genders
  role: ["Developer", "Designer"], // All roles
};

// Shuffle function (Fisher-Yates shuffle)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// Function to generate teams
function generateTeams(employees, teamCriteria, teamSize) {
  // Shuffle the employees
  shuffleArray(employees);

  // Calculate the number of teams needed
  const numTeams = Math.ceil(employees.length / teamSize);

  // Initialize teams
  const teams = [];
  for (let i = 0; i < numTeams; i++) {
    teams.push([]);
  }

  // Distribute employees into teams while ensuring criteria match
  for (const employee of employees) {
    for (let i = 0; i < teams.length; i++) {
      // Check if the team meets the criteria for this employee
      const teamMeetsCriteria =
        teamCriteria.location.includes(employee.location) &&
        teamCriteria.gender.includes(employee.gender) &&
        teamCriteria.role.includes(employee.role);

      // If the team meets the criteria, add the employee to it
      if (teamMeetsCriteria && teams[i].length < teamSize) {
        teams[i].push(employee);
        break; // Move to the next employee
      }
    }
  }

  return teams;
}

// Define team size
const teamSize = 4;

// Generate teams
const teams = generateTeams(employees, teamCriteria, teamSize);

// Output the teams
console.log(teams);

// Sample employee data in JSON format
const employees = [
  { name: "Employee 1", location: "Location A", gender: "Male", role: "Developer" },
  { name: "Employee 2", location: "Location B", gender: "Female", role: "Designer" },
  // Add more employee data here
];

// Define team criteria with arrays
const criteria = {
  location: ["Location A", "Location B"],
  gender: ["Male"],
  role: ["Developer", "Designer"],
};

// Function to filter employees based on criteria
function filterEmployees(employees, criteria) {
  return employees.filter(employee => {
    return (
      criteria.location.includes(employee.location) &&
      criteria.gender.includes(employee.gender) &&
      criteria.role.includes(employee.role)
    );
  });
}

// Shuffle function (Fisher-Yates shuffle)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// Function to generate teams
function generateTeams(employees, criteria, teamSize) {
  const filteredEmployees = filterEmployees(employees, criteria);

  // Shuffle the filtered employees
  shuffleArray(filteredEmployees);

  // Calculate the number of teams needed
  const numTeams = Math.ceil(filteredEmployees.length / teamSize);

  // Initialize teams
  const teams = [];
  for (let i = 0; i < numTeams; i++) {
    teams.push([]);
  }

  // Distribute employees into teams
  for (let i = 0; i < filteredEmployees.length; i++) {
    teams[i % numTeams].push(filteredEmployees[i]);
  }

  return teams;
}

// Define team size
const teamSize = 4;

// Generate teams
const teams = generateTeams(employees, criteria, teamSize);

// Output the teams
console.log(teams);

function createTeams(employees, numTeams) {
  // Group employees by location, gender, and role
  const groupedEmployees = {};
  employees.forEach(employee => {
    const key = `${employee.location}-${employee.gender}-${employee.role}`;
    if (!groupedEmployees[key]) {
      groupedEmployees[key] = [];
    }
    groupedEmployees[key].push(employee);
  });

  // Calculate target team size
  const totalEmployees = employees.length;
  const targetTeamSize = Math.ceil(totalEmployees / numTeams);

  // Create teams
  const teams = [];
  let currentTeam = [];
  for (const key in groupedEmployees) {
    const group = groupedEmployees[key];
    while (group.length > 0) {
      if (currentTeam.length < targetTeamSize) {
        currentTeam.push(group.pop());
      } else {
        teams.push(currentTeam);
        currentTeam = [];
      }
    }
  }

  // Distribute any remaining employees
  teams.push(...currentTeam);

  return teams;
}

// Example usage:
const employees = [
  { location: 'A', gender: 'Male', role: 'Developer' },
  { location: 'A', gender: 'Female', role: 'Designer' },
  // Add more employee data here...
];

const numTeams = 3;
const teams = createTeams(employees, numTeams);
console.log(teams);
// Function to create teams based on criteria
function createTeamsWithAllCriteria(employeeData, numTeams, criteria) {
  // Group employees by criteria (e.g., location, gender, role)
  const groupedEmployees = {};
  for (const employee of employeeData) {
    const key = criteria.map((criterion) => employee[criterion]).join("-");
    if (!groupedEmployees[key]) {
      groupedEmployees[key] = [];
    }
    groupedEmployees[key].push(employee);
  }

  // Calculate the target team size
  const totalEmployeeCount = Object.values(groupedEmployees).reduce(
    (count, employeesWithCriteria) => count + employeesWithCriteria.length,
    0
  );
  const targetTeamSize = Math.floor(totalEmployeeCount / numTeams);

  if (totalEmployeeCount < numTeams) {
    return "Not enough employees to create the specified number of teams.";
  }

  // Randomly assign employees to teams while ensuring all criteria are met
  const teams = [];
  const criteriaKeys = {};
  for (const criterion of criteria) {
    criteriaKeys[criterion] = [...new Set(employeeData.map((employee) => employee[criterion]))];
    shuffleArray(criteriaKeys[criterion]);
  }

  for (let i = 0; i < numTeams; i++) {
    const team = [];

    // Select employees for each criteria value
    for (const criterion of criteria) {
      for (const value of criteriaKeys[criterion]) {
        const key = [criterion, value].join("-");
        if (groupedEmployees[key] && groupedEmployees[key].length > 0) {
          const selectedEmployee = groupedEmployees[key].shift();
          team.push(selectedEmployee);

          // If the team size exceeds the target size, move to the next team
          if (team.length >= targetTeamSize) {
            break;
          }
        }
      }
    }

    teams.push(team);
  }

  return teams;
}

// Example usage
const numTeams = 3; // Specify the number of teams
const criteria = ["location", "gender", "role"]; // Specify the criteria for team composition

const result = createTeamsWithAllCriteria(employees, numTeams, criteria);
for (let i = 0; i < result.length; i++) {
  console.log(`Team ${i + 1}:`);
  for (const employee of result[i]) {
    console.log(employee.name);
  }
  console.log();
}
// Function to create teams based on criteria
function createTeamsWithAllLocationsAndGenders(employeeData, numTeams, criteria) {
  // Group employees by criteria (e.g., location, gender, role)
  const groupedEmployees = {};
  for (const employee of employeeData) {
    const key = criteria.map((criterion) => employee[criterion]).join("-");
    if (!groupedEmployees[key]) {
      groupedEmployees[key] = [];
    }
    groupedEmployees[key].push(employee);
  }

  // Ensure there are enough employees for the specified number of teams
  const totalEmployeeCount = Object.values(groupedEmployees).reduce(
    (count, employeesWithCriteria) => count + employeesWithCriteria.length,
    0
  );
  if (totalEmployeeCount < numTeams) {
    return "Not enough employees to create the specified number of teams.";
  }

  // Randomly assign employees to teams while ensuring all locations and genders are represented
  const teams = [];
  const locationKeys = [...new Set(employeeData.map((employee) => employee.location))];
  const genderKeys = [...new Set(employeeData.map((employee) => employee.gender))];
  
  for (let i = 0; i < numTeams; i++) {
    const team = [];

    // Shuffle location and gender keys to distribute evenly
    shuffleArray(locationKeys);
    shuffleArray(genderKeys);

    for (const location of locationKeys) {
      for (const gender of genderKeys) {
        const key = [location, gender].join("-");
        if (groupedEmployees[key] && groupedEmployees[key].length > 0) {
          const selectedEmployee = groupedEmployees[key].shift();
          team.push(selectedEmployee);
        }
      }
    }
    
    teams.push(team);
  }

  return teams;
}

// Utility function to shuffle an array (Fisher-Yates shuffle)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// Example usage
const numTeams = 3; // Specify the number of teams
const criteria = ["location", "gender"]; // Specify the criteria for team composition

const result = createTeamsWithAllLocationsAndGenders(employees, numTeams, criteria);
for (let i = 0; i < result.length; i++) {
  console.log(`Team ${i + 1}:`);
  for (const employee of result[i]) {
    console.log(employee.name);
  }
  console.log();
}
// Sample employee data (you would typically load this from a database or file)
const employees = [
    { id: 1, name: "Alice", location: "New York", role: "Developer", gender: "Female" },
    { id: 2, name: "Bob", location: "Los Angeles", role: "Designer", gender: "Male" },
    // Add more employee data here
];

// Function to create diverse teams
function createDiverseTeams(employees) {
    // Separate employees by location, role, and gender
    const employeesByLocation = {};
    const employeesByRole = {};
    const employeesByGender = {};

    employees.forEach((employee) => {
        const { location, role, gender } = employee;

        if (!employeesByLocation[location]) {
            employeesByLocation[location] = [];
        }
        employeesByLocation[location].push(employee);

        if (!employeesByRole[role]) {
            employeesByRole[role] = [];
        }
        employeesByRole[role].push(employee);

        if (!employeesByGender[gender]) {
            employeesByGender[gender] = [];
        }
        employeesByGender[gender].push(employee);
    });

    // Create diverse teams based on location, role, and gender
    const teams = [];

    // You can adjust the team composition criteria as needed
    const maxTeamSize = 4;
    const minTeamSize = 2;

    for (const location in employeesByLocation) {
        for (const role in employeesByRole) {
            for (const gender in employeesByGender) {
                const team = [];
                const eligibleEmployees = employeesByLocation[location]
                    .filter(employee => employeesByRole[role].includes(employee))
                    .filter(employee => employeesByGender[gender].includes(employee));

                while (team.length < maxTeamSize && eligibleEmployees.length > 0) {
                    const randomIndex = Math.floor(Math.random() * eligibleEmployees.length);
                    const selectedEmployee = eligibleEmployees.splice(randomIndex, 1)[0];
                    team.push(selectedEmployee);
                }

                if (team.length >= minTeamSize) {
                    teams.push(team);
                }
            }
        }
    }

    return teams;
}

// Example usage:
const diverseTeams = createDiverseTeams(employees);
console.log(diverseTeams);

// Sample employee data (you would have your own data)
const employees = [
  { name: 'Employee 1', location: 'Location A', gender: 'Male', experience: 5, role: 'Developer' },
  { name: 'Employee 2', location: 'Location B', gender: 'Female', experience: 3, role: 'Designer' },
  { name: 'Employee 3', location: 'Location A', gender: 'Female', experience: 2, role: 'Developer' },
  // Add more employees here
];

// Criteria for team formation
const criteria = {
  locations: ['Location A', 'Location B'], // List of required locations
  genders: ['Male', 'Female'], // List of required genders
  minSeniority: 3, // Minimum experience level for seniority
  roles: ['Developer', 'Designer'], // List of required roles
};

// Function to generate diversified teams with equal team members
function generateDiversifiedTeams(employees, criteria, numTeams) {
  const teams = [];
  const availableEmployees = [...employees]; // Copy of employees array for manipulation

  // Helper function to check if criteria are met
  function meetsCriteria(employee, team) {
    return (
      criteria.locations.includes(employee.location) &&
      criteria.genders.includes(employee.gender) &&
      employee.experience >= criteria.minSeniority &&
      criteria.roles.includes(employee.role)
    );
  }

  // Divide employees equally among teams
  for (let i = 0; i < numTeams; i++) {
    const team = {
      location: criteria.locations[i % criteria.locations.length],
      gender: criteria.genders[i % criteria.genders.length],
      role: criteria.roles[i % criteria.roles.length],
      members: [],
    };

    availableEmployees.forEach(employee => {
      if (meetsCriteria(employee, team)) {
        team.members.push(employee);
      }
    });

    teams.push(team);

    // Remove assigned employees from the available pool
    team.members.forEach(employee => {
      const index = availableEmployees.findIndex(e => e === employee);
      if (index !== -1) {
        availableEmployees.splice(index, 1);
      }
    });
  }

  return teams;
}

const numTeams = 3; // Specify the number of teams
const diversifiedTeams = generateDiversifiedTeams(employees, criteria, numTeams);

console.log('Diversified Teams:', diversifiedTeams);
// Sample employee data (you would have your own data)
const employees = [
  { name: 'Employee 1', location: 'Location A', gender: 'Male', experience: 5, role: 'Developer' },
  { name: 'Employee 2', location: 'Location B', gender: 'Female', experience: 3, role: 'Designer' },
  { name: 'Employee 3', location: 'Location A', gender: 'Female', experience: 2, role: 'Developer' },
  // Add more employees here
];

// Criteria for team formation
const criteria = {
  locations: ['Location A', 'Location B'], // List of required locations
  genders: ['Male', 'Female'], // List of required genders
  minSeniority: 3, // Minimum experience level for seniority
  roles: ['Developer', 'Designer'], // List of required roles
};

// Function to generate diversified teams
function generateDiversifiedTeams(employees, criteria, numTeams) {
  const teams = [];
  const availableEmployees = [...employees]; // Copy of employees array for manipulation

  // Helper function to check if criteria are met
  function meetsCriteria(employee, team) {
    return (
      criteria.locations.includes(employee.location) &&
      criteria.genders.includes(employee.gender) &&
      employee.experience >= criteria.minSeniority &&
      criteria.roles.includes(employee.role)
    );
  }

  // Helper function to remove an employee from the available pool
  function removeEmployeeFromPool(employee) {
    const index = availableEmployees.findIndex(e => e === employee);
    if (index !== -1) {
      availableEmployees.splice(index, 1);
    }
  }

  for (let i = 0; i < numTeams; i++) {
    const team = {
      location: criteria.locations[i % criteria.locations.length],
      gender: criteria.genders[i % criteria.genders.length],
      role: criteria.roles[i % criteria.roles.length],
      senior: [],
      junior: [],
    };

    availableEmployees.forEach(employee => {
      if (meetsCriteria(employee, team)) {
        team.senior.length <= team.junior.length
          ? team.senior.push(employee)
          : team.junior.push(employee);

        removeEmployeeFromPool(employee);
      }
    });

    teams.push(team);
  }

  return teams;
}

const numTeams = 3; // Specify the number of teams
const diversifiedTeams = generateDiversifiedTeams(employees, criteria, numTeams);

console.log('Diversified Teams:', diversifiedTeams);


// Sample employee data (you would have your own data)
const employees = [
  { name: 'Employee 1', location: 'Location A', gender: 'Male', experience: 5, role: 'Developer' },
  { name: 'Employee 2', location: 'Location B', gender: 'Female', experience: 3, role: 'Designer' },
  { name: 'Employee 3', location: 'Location A', gender: 'Female', experience: 2, role: 'Developer' },
  // Add more employees here
];

// Criteria for team formation
const criteria = {
  locations: ['Location A', 'Location B'], // List of required locations
  genders: ['Male', 'Female'], // List of required genders
  minSeniority: 3, // Minimum experience level for seniority
  roles: ['Developer', 'Designer'], // List of required roles
};

// Function to generate diversified teams
function generateDiversifiedTeams(employees, criteria) {
  const teams = [];
  const availableEmployees = [...employees]; // Copy of employees array for manipulation

  // Helper function to check if criteria are met
  function meetsCriteria(employee, team) {
    return (
      criteria.locations.includes(employee.location) &&
      criteria.genders.includes(employee.gender) &&
      employee.experience >= criteria.minSeniority &&
      criteria.roles.includes(employee.role)
    );
  }

  // Helper function to remove an employee from the available pool
  function removeEmployeeFromPool(employee) {
    const index = availableEmployees.findIndex(e => e === employee);
    if (index !== -1) {
      availableEmployees.splice(index, 1);
    }
  }

  criteria.locations.forEach(location => {
    criteria.genders.forEach(gender => {
      criteria.roles.forEach(role => {
        const team = {
          location,
          gender,
          role,
          senior: [],
          junior: [],
        };

        availableEmployees.forEach(employee => {
          if (meetsCriteria(employee, team)) {
            team.senior.length <= team.junior.length
              ? team.senior.push(employee)
              : team.junior.push(employee);

            removeEmployeeFromPool(employee);
          }
        });

        teams.push(team);
      });
    });
  });

  return teams;
}

const diversifiedTeams = generateDiversifiedTeams(employees, criteria);

console.log('Diversified Teams:', diversifiedTeams);


[
    {
        "name": "John Smith",
        "gender": "Male",
        "age": 32,
        "joinDate": "2019-05-15",
        "role": "Engineer",
        "location": "New York"
    },
    {
        "name": "Alice Johnson",
        "gender": "Female",
        "age": 28,
        "joinDate": "2020-02-20",
        "role": "Manager",
        "location": "San Francisco"
    },
    {
        "name": "David Brown",
        "gender": "Male",
        "age": 35,
        "joinDate": "2018-09-10",
        "role": "Designer",
        "location": "Los Angeles"
    },
    {
        "name": "Emily Davis",
        "gender": "Female",
        "age": 27,
        "joinDate": "2021-11-05",
        "role": "Engineer",
        "location": "Chicago"
    },
    {
        "name": "Michael Wilson",
        "gender": "Male",
        "age": 29,
        "joinDate": "2022-03-10",
        "role": "Manager",
        "location": "Boston"
    },
    {
        "name": "Sophia Anderson",
        "gender": "Female",
        "age": 30,
        "joinDate": "2020-08-15",
        "role": "Designer",
        "location": "Seattle"
    },
    {
        "name": "William Lee",
        "gender": "Male",
        "age": 33,
        "joinDate": "2017-07-25",
        "role": "Engineer",
        "location": "Denver"
    },
    {
        "name": "Olivia White",
        "gender": "Female",
        "age": 31,
        "joinDate": "2016-04-12",
        "role": "Manager",
        "location": "Miami"
    },
    {
        "name": "Daniel Harris",
        "gender": "Male",
        "age": 34,
        "joinDate": "2015-09-30",
        "role": "Designer",
        "location": "Austin"
    },
    {
        "name": "Ava Turner",
        "gender": "Female",
        "age": 26,
        "joinDate": "2023-01-05",
        "role": "Engineer",
        "location": "San Diego"
    },
    {
        "name": "Liam Martinez",
        "gender": "Male",
        "age": 31,
        "joinDate": "2018-06-20",
        "role": "Manager",
        "location": "New York"
    },
    {
        "name": "Mia Gonzalez",
        "gender": "Female",
        "age": 29,
        "joinDate": "2020-03-18",
        "role": "Designer",
        "location": "San Francisco"
    },
    {
        "name": "James Turner",
        "gender": "Male",
        "age": 36,
        "joinDate": "2017-02-14",
        "role": "Engineer",
        "location": "Los Angeles"
    },
    {
        "name": "Charlotte Scott",
        "gender": "Female",
        "age": 28,
        "joinDate": "2019-09-30",
        "role": "Manager",
        "location": "Chicago"
    },
    {
        "name": "Benjamin Hall",
        "gender": "Male",
        "age": 33,
        "joinDate": "2022-01-10",
        "role": "Designer",
        "location": "Boston"
    },
    {
        "name": "Amelia Adams",
        "gender": "Female",
        "age": 30,
        "joinDate": "2018-11-25",
        "role": "Engineer",
        "location": "Seattle"
    },
    {
        "name": "Lucas Parker",
        "gender": "Male",
        "age": 35,
        "joinDate": "2016-08-10",
        "role": "Manager",
        "location": "Denver"
    },
    {
        "name": "Grace Rodriguez",
        "gender": "Female",
        "age": 27,
        "joinDate": "2021-04-05",
        "role": "Designer",
        "location": "Miami"
    },
    {
        "name": "Jackson Wright",
        "gender": "Male",
        "age": 32,
        "joinDate": "2019-03-15",
        "role": "Engineer",
        "location": "Austin"
    },
    {
        "name": "Lily Moore",
        "gender": "Female",
        "age": 31,
        "joinDate": "2017-12-05",
        "role": "Manager",
        "location": "San Diego"
    },
    {
        "name": "Logan Hill",
        "gender": "Male",
        "age": 29,
        "joinDate": "2020-10-20",
        "role": "Designer",
        "location": "New York"
    },
    {
        "name": "Chloe Lewis",
        "gender": "Female",
        "age": 28,
        "joinDate": "2021-07-18",
        "role": "Engineer",
        "location": "San Francisco"
    },
    {
        "name": "Samuel Young",
        "gender": "Male",
        "age": 34,
        "joinDate": "2016-06-12",
        "role": "Manager",
        "location": "Los Angeles"
    },
    {
        "name": "Zoe Turner",
        "gender": "Female",
        "age": 30,
        "joinDate": "2020-04-30",
        "role": "Designer",
        "location": "Chicago"
    },
    {
        "name": "Henry Harris",
        "gender": "Male",
        "age": 33,
        "joinDate": "2017-05-10",
        "role": "Engineer",
        "location": "Boston"
    },
    {
        "name": "Ella Clark",
        "gender": "Female",
        "age": 28,
        "joinDate": "2019-08-15",
        "role": "Manager",
        "location": "Seattle"
    },
    {
        "name": "William Turner",
        "gender": "Male",
        "age": 29,
        "joinDate": "2022-02-25",
        "role": "Designer",
        "location": "Denver"
    },
    {
        "name": "Avery King",
        "gender": "Female",
        "age": 31,
        "joinDate": "2018-03-20",
        "role": "Engineer",
        "location": "Miami
// Sample employee data
const employees = [
    { name: "Employee 1", gender: "Male", age: 30, joinDate: "2020-01-15", role: "Engineer", location: "New York" },
    { name: "Employee 2", gender: "Female", age: 35, joinDate: "2018-05-10", role: "Manager", location: "San Francisco" },
    // Add more employee data here
];

// Function to shuffle an array randomly
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// Function to create diverse teams and select captains
function createDiverseTeamsWithCaptains(employees, teamSize) {
    // Shuffle the employee array randomly
    shuffleArray(employees);

    // Split employees into teams
    const teams = [];
    for (let i = 0; i < employees.length; i += teamSize) {
        const team = employees.slice(i, i + teamSize);
        
        // Select the captain based on your diversity criteria (e.g., the first team member)
        const captain = team[0];
        team.splice(0, 1); // Remove the captain from the team
        
        // Add the captain back to the team
        team.unshift(captain);
        
        teams.push(team);
    }

    return teams;
}

// Usage example
const diverseTeamsWithCaptains = createDiverseTeamsWithCaptains(employees, 4); // Change the team size as needed
console.log(diverseTeamsWithCaptains);


Creating teams that have a mix of all specified criteria while ensuring diversity in terms of gender, age, join date, role, and location requires a more complex approach. Here's an example of how you can achieve this:

```javascript
// Sample data of people with criteria including location
const people = [
  { name: "Person 1", gender: "Male", age: 30, joinDate: "2020-01-15", role: "Developer", location: "New York" },
  { name: "Person 2", gender: "Female", age: 25, joinDate: "2022-03-10", role: "Designer", location: "Los Angeles" },
  { name: "Person 3", gender: "Male", age: 28, joinDate: "2021-07-05", role: "Tester", location: "Chicago" },
  { name: "Person 4", gender: "Female", age: 32, joinDate: "2021-11-20", role: "Developer", location: "New York" },
  { name: "Person 5", gender: "Male", age: 29, joinDate: "2022-02-15", role: "Designer", location: "Los Angeles" },
  // Add more people here
];

// Criteria for team composition, including location
const criteria = {
  gender: ["Male", "Female"],
  age: { min: 25, max: 35 },
  joinDate: "2022-01-01",
  roles: ["Developer", "Designer"],
};

// Function to filter people based on criteria including location
function filterPeople(people, criteria) {
  return people.filter(person => {
    return (
      criteria.gender.includes(person.gender) &&
      person.age >= criteria.age.min &&
      person.age <= criteria.age.max &&
      person.joinDate >= criteria.joinDate &&
      criteria.roles.includes(person.role)
    );
  });
}

// Function to create teams with a mix of all criteria and location
function createTeamsWithMixOfCriteria(people, criteria, teamSize) {
  const filteredPeople = filterPeople(people, criteria);

  const teams = [];

  while (teams.length < teamSize) {
    const team = [];

    for (const criterion of Object.keys(criteria)) {
      const matchingPeople = filteredPeople.filter(person => person[criterion] === criteria[criterion]);
      if (matchingPeople.length === 0) {
        // If no one matches the current criterion, clear the team and start over
        break;
      }

      const randomIndex = Math.floor(Math.random() * matchingPeople.length);
      const person = matchingPeople.splice(randomIndex, 1)[0];
      team.push(person);
    }

    if (team.length === Object.keys(criteria).length) {
      // If the team meets all criteria, add it to the list of teams
      teams.push(team);
    }
  }

  return teams;
}

const teamSize = 3; // Change this to the desired team size
const teams = createTeamsWithMixOfCriteria(people, criteria, teamSize);
console.log(teams);
```

This code creates teams that meet all specified criteria (gender, age, join date, role) while also ensuring diversity in terms of location within each team. If there are not enough people who meet all criteria, it will clear the team and retry until it finds a suitable team.
